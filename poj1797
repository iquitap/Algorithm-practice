#include <iostream>
#include <stdio.h>
#include <math.h>
#include <queue>
#include <algorithm>
#include <cstring>
#include <assert.h>
#include <stdlib.h>

#define MAX 1000+5
#define Inf 1e9
using namespace std;

int n,m;
int d[MAX][MAX];
int visit[MAX];
int f[MAX];
void init(int n ,int m ){
    for(int i = 1 ; i <= n ; i++){
        for(int j = 1 ; j <= n;j++){
            if(i==j)
                d[i][j] = 0;
            else
                d[i][j] = -1;
        }
    }
    memset(visit,0,sizeof(visit));
    return;
}

void add_edge(int a,int b ,int c){
    d[a][b] = c;
    return;
}

int dijkstra(void){
    int temp;
    int pos;
    for(int i = 1 ; i<=n ;i++){
        if(d[1][i] == -1)
            f[i] = -1;
        else
            f[i] = d[1][i];
    }
    visit[1] = 1;
    for(int i = 1 ; i <= n;i++){
        temp = -1;
        for(int j = 1 ; j <= n;j++){
            if(!visit[j] && f[j] > temp){
                temp = f[j];
                pos = j;
            }
        }
        visit[pos] = 1;
        for(int k = 1; k <= n ;k++){
            if(!visit[k] && f[k] < min(f[pos],d[pos][k])){
                f[k] = min(f[pos],d[pos][k]);
            }
        }
    }
    return f[n];
}
int main(){
    int q;
    int j;
    cin >> q;
    for(j = 1 ; j<= q;j++){
        cin >> n >> m;
        init(n,m);
        for(int i = 1 ; i <= m ;i++){
            int a,b,c;
            cin >> a >> b >> c;
            add_edge(a,b,c);
            add_edge(b,a,c);
        }
        printf("Scenario #%d:\n",j);
        cout << dijkstra() << endl << endl;
    }
    return 0;
}
