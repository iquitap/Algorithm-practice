#include <iostream>
#include <string.h>
#include <stdlib.h>


#define MAXN 50+5
#define MAXR 100+10
#define Inf  1e9
using namespace std;

int map[MAXN][MAXN];
int p,r;
int ans;
int d[MAXN];
int visit[MAXN];

void init(void)
{
    //memset(map,0,sizeof(map));
    for(int i = 1 ; i <= p; i++)
    {
        for(int j = 1 ; j <= p; j++)
        {
            if(i == j)
                map[i][j] = 0;
            else
                map[i][j] = Inf;
        }
    }
    memset(d,0,sizeof(d));
    memset(visit,0,sizeof(visit));
    ans = 0;
    return;
}

void add_edge(int u,int v,int w)
{
    if(map[u][v] > w)
        map[u][v] = w;
    return;
}

void check(void)
{
    cout << "map: " << endl;
    for(int i = 1 ; i <= p; i++)
    {
        for(int j = 1 ; j <= p; j++)
        {
            cout << map[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
    cout << "d: " << endl;
    for(int i = 1 ; i <= p; i++)
    {

        cout << d[i] << " ";

        cout << endl;
    }
}

void prim(void)
{
    int mv,me;

    for(int i = 1 ; i <= p; i++)
    {
        d[i] = map[1][i];
    }
    //check();
    visit[1] = 1;
    for(int i = 2 ; i <= p; i++)
    {
        me = Inf;
        for(int j = 1 ; j <= p ; j++)
        {
            if(d[j] < me && !visit[j])
            {
                mv = j;
                me = d[j];
            }
        }
        visit[mv] = 1;
        for(int j = 1 ; j <=p ; j++)
        {
            if(map[mv][j] < d[j] && !visit[j])
            {
                d[j] = map[mv][j];
            }
        }
    }

}

int main()
{
    int u,v,w;
    while(cin >> p && p)
    {
        cin >> r;
        init();
        for(int i = 0 ; i < r; i++)
        {
            cin >> u >> v >> w;
            add_edge(u,v,w);
            add_edge(v,u,w);
        }
        prim();
        //check();
        for(int i = 1 ; i <=p ;i++)
            ans += d[i];
        cout << ans << endl;
    }
    return 0;
}
