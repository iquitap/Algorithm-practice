#include <iostream>
#include <string.h>
#include <algorithm>
#include <stdio.h>

#define MAXN 1000+10
#define MAXP 300*2+10

using namespace std;



int n,p1,p2;
int pre[MAXP],r[MAXP];  //0表示为同类
int g[MAXP];            //g[i]=1表示i为所在小集合的根
int tot;                //集合个数
int t[MAXP][2],dp[MAXP][MAXP],pa[MAXP][MAXP],ans[MAXP][2];
void init(void)
{
    for(int i=0;i<=MAXP*2;i++)
    {
        pre[i]=i;
    }
    memset(r,0,sizeof(r));
    memset(g,0,sizeof(g));
    memset(t,0,sizeof(t));
    memset(dp,0,sizeof(dp));
    memset(pa,0,sizeof(pa));
    memset(ans,0,sizeof(ans));
}

int findSet(int x)
{
    if(x!=pre[x])
    {
        int fx = findSet(pre[x]);
        r[x] ^= r[pre[x]];
        pre[x] = fx;
        return fx;
    }
    return pre[x];
}

void joinSet(int x,int y,int d)
{
    int fx = findSet(x);
    int fy = findSet(y);
    if(fx!=fy)
    {
        pre[fy] = fx;
        r[fy] = r[x]^r[y]^d;
    }
}
void test()
{
    for(int i=1;i <= p1+p2;i++)
    {
        printf("pre[%d] = %d, r[%d] = %d; \n",i,pre[i],i,r[i]);
    }
}
int main()
{
    char rs[10];
    int x,y,d;
    int i,j;
    while(scanf("%d%d%d",&n,&p1,&p2))
    {
        if(!(n||p1||p2))
            break;
        init();
        for(i=1; i<=n ;i++)
        {
            scanf("%d%d%s",&x,&y,rs);
            if(rs[0]=='n')
                d=1;
            else
                d=0;
            joinSet(x,y,d);
            //test();
        }
        tot = 0;
        for(i = 1;i <= p1+p2 ; i++)     //统计集合的个数，g[i]为编号
            if(findSet(i) == i)
                g[i]=++tot;

        for(i = 1; i <= p1+p2 ; i++)    //t[m][n]表示第m个小集体中关系为n的数目
            t[g[findSet(i)]][r[i]]++;

        /*for(int i = 1 ; i <= p1+p2; i++)
        {
                printf("g[%d]=%d\n",i,g[i]);
        }
        for(int i = 1 ; i <= p1+p2; i++)
        {
            for(int j=0;j<=1;j++)
                printf("t[%d][%d]=%d\t",i,j,t[i][j]);
            printf("\n");
        }*/
        dp[0][0]=1;                         //dp[i][j]存储到第i个集合选择种类和为j的方法数
        for (i=1;i<=tot;i++)
        {
            for (j=0;j<=p1+p2;j++)
            {
                if (j-t[i][0]>=0 && dp[i-1][j-t[i][0]]>0)
                {
                    dp[i][j] += dp[i-1][j-t[i][0]];
                    pa[i][j] = t[i][0];
                }
                if (j-t[i][1]>=0 && dp[i-1][j-t[i][1]]>0)
                {
                    dp[i][j] += dp[i-1][j-t[i][1]];
                    pa[i][j] = t[i][1];
                }
                if (dp[i][j]>1) dp[i][j]=2;             //!!!
            }

            /*for(int i = 1 ; i <= p1+p2; i++)
            {
                for(int j=0;j<=p1+p2;j++)
                    printf("dp[%d][%d]=%d\t",i,j,dp[i][j]);
                printf("\n");
            }
            printf("\n");
            for(int i = 1 ; i <= p1+p2; i++)
            {
                for(int j=0;j<=p1+p2;j++)
                    printf("pa[%d][%d]=%d\t",i,j,pa[i][j]);
                printf("\n");
            }
            printf("\n");*/
        }

        if(dp[tot][p1]!=1)
            printf("no\n");
        else
        {
            for (i=tot,j=p1;i>0 && j>0;i--)
            {
                if(pa[i][j] == t[i][0])
                    ans[i][0] = 1;
                else
                    ans[i][1] = 1;
                j -= pa[i][j];
            }
            for(i=1; i <= p1+p2 ;i++)
            {
                if(ans[g[findSet(i)]][r[i]])
                    printf("%d\n",i);
            }
            printf("end\n");
        }
    }
    return 0;
}
